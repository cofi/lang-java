module org/sugarj/java/InterfaceExtractor
imports
  org/sugarj/languages/Java
  org/sugarj/languages/SugarJ

signature
  constructors
    Interface : Any -> Interface
    IClass       : JavaId * List(JavaAnno_JavaClassMod0) * Option(JavaSuper) * Option(JavaInterfaces) * List(InterfaceComponent) -> InterfaceComponent
    IInterface   : JavaId * List(JavaAnno_JavaClassMod0) * Option(JavaInterfaces) * List(InterfaceComponent) -> InterfaceComponent
    IEnum        : JavaId * List(JavaAnno_JavaClassMod0) * Option(JavaInterfaces) * List(InterfaceComponent) -> InterfaceComponent

    IField       : JavaId * List(JavaAnno_JavaClassMod0) * JavaType -> InterfaceComponent

    IMethod      : JavaId * List(JavaAnno_JavaClassMod0) * JavaResultType * List(JavaFormalParam) * Option(JavaThrows) -> InterfaceComponent

    IConstructor : JavaId * List(JavaAnno_JavaClassMod0) * List(JavaFormalParam) * Option(JavaThrows) -> InterfaceComponent

rules
  extract-interface : CompilationUnit(decs) -> Interface(<filter(extract-interface)> decs)

  extract-interface : ClassBody(elems) -> <filter(extract-interface)> elems

  extract-interface : c@ClassDec(ClassDecHead(mods, idj, _, super, interfaces), body) -> ("java", ifc)
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc-body := <extract-interface> body
        ; ifc := IClass(idj, mods, super, interfaces, ifc-body)

  extract-interface : c@InterfaceDec(InterfaceDecHead(mods, idj, _, interfaces), body) ->  ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc-body := <extract-interface> body
        ; ifc := IInterface(idj, mods, interfaces, ifc-body)

  extract-interface : c@EnumDec(EnumDecHead(mods, idj, interfaces), body) -> <java-ifc> ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc-body := <extract-interface> body
        ; ifc := IEnum(idj, mods, interfaces, ifc-body)

  /**
  Extract fields
  */
  extract-interface : FieldDec(mods, type, [VarDec(idj, _)]) -> ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc := IField(idj, mods, type)

  extract-interface : FieldDec(mods, type, [VarDec(idj)]) -> ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc := IField(idj, mods, type)

  /**
  Extract methods
  */
  extract-interface : m@MethodDec(MethodDecHead(mods, typeParams, resultType, idj, formalParams, throws), body) -> ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc := IMethod(idj, mods, resultType, formalParams, throws)
  extract-interface : c@ConstrDec(ConstrDecHead(mods, typeParams, idj, formalParams, throws), _) -> ifc
    where <fetch-elem(?Public() + ?Protected())> mods
        ; ifc := IConstructor(idj, mods, formalParams, throws)

  extract-interface = debug(!"extract failed: "); fail

/**
TODO:
*/
rules
   ifc-conc : (ifc1, ifc2) -> 6 // merge
